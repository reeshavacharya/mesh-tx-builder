import { PlutusScript, Transaction } from "@meshsdk/core"
import { getTransactionDetails } from "../ blockfrost"

export const simpleTx = async (
    walletData
        : any) => {
    const depositUtxoBlockfrost = await getTransactionDetails("96639130f404ad08f9d6bb3441193592e32dd9ca7206b5f120cc9089e393335b")
    const simpleRedeemer = {
        data: {
            alternative: 0,
            fields: []
        }
    }
    const collateral = await walletData?.getCollateral()

    const outputAddr = "addr_test1qr0k5uczwvzdt6g6c2e9l92r24f528dfnmu9qq6lssrc3z56l3lczn30u56k4vlf948etel5d63zj20yg6wymu2gp4gsyum3sz"
    const simpleContractAddress = "addr_test1wp7sp9m7anhsg66y5ttwmtk4u4jcatsacl80d87kpr6jn6sw43l3n"
    const filterActualDepositUtxo = depositUtxoBlockfrost?.outputs.filter((item: any) => item.address == simpleContractAddress)
    const depositUtxo = {
        input: {
            txHash: depositUtxoBlockfrost.hash,
            outputIndex: 0
        },
        output: {
            address: filterActualDepositUtxo[0]?.address,
            amount: filterActualDepositUtxo?.[0].amount?.map((item: any, index: number) => ({
                unit: item.unit,
                quantity: item.quantity
            })),
            plutusData: filterActualDepositUtxo[0]?.inline_datum
        }
    }
    const simpleContractScript = {
        "type": "PlutusScriptV2",
        "description": "",
        "cborHex": "5909765909730100003323232323322323232323232323232332232323232323232323222223232533532325335533533355300a120013233500c22333500322002002001350012200112330012253350021021100101e2001500115335333355300a1200150092201f500101e101d101e101d101e133573892115496e76616c6964204f7574707574416464726573730001d133335530091200150082235002222233501735004223500f2232335005233500425335333573466e3c0080040a80a45400c40a480a48cd401080a494cd4ccd5cd19b8f00200102a029150031029153350032153350022133500223350022335002233500223301b002001202c2335002202c23301b00200122202c222335004202c2225335333573466e1c01800c0bc0b854cd4ccd5cd19b8700500202f02e1333573466e1c0100040bc0b840b840b8409c54cd40048409c409c014d4d4004880088888888888880294048cccd5cd19b8735573aa0049000119910919800801801191919191919191919191919191999ab9a3370e6aae754031200023333333333332222222222221233333333333300100d00c00b00a00900800700600500400300233501a01b35742a01866a0340366ae85402ccd4068070d5d0a805199aa80f3ae501d35742a012666aa03ceb94074d5d0a80419a80d0129aba150073335501e02675a6ae854018c8c8c8cccd5cd19b8735573aa00490001199109198008018011919191999ab9a3370e6aae754009200023322123300100300233503075a6ae854008c0c4d5d09aba2500223263203533573806c06a06626aae7940044dd50009aba150023232323333573466e1cd55cea8012400046644246600200600466a060eb4d5d0a80118189aba135744a004464c6406a66ae700d80d40cc4d55cf280089baa001357426ae8940088c98c80c4cd5ce01901881789aab9e5001137540026ae854014cd4069d71aba150043335501e022200135742a006666aa03ceb88004d5d0a80118121aba135744a004464c6405a66ae700b80b40ac4d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135573ca00226ea8004d5d0a801180a1aba135744a004464c6403e66ae7008007c07440784c98c8078cd5ce2481035054350001e135573ca00226ea80044cd4008888c00cc0080048004c8004d5406088448894cd40044d400c88004884ccd401488008c010008ccd54c01c4800401401000448848cc00400c00888ccd5cd19b8f0020010140131232230023758002640026aa02c446666aae7c004940288cd4024c010d5d080118019aba2002016232323333573466e1cd55cea8012400046644246600200600460186ae854008c014d5d09aba2500223263201633573802e02c02826aae7940044dd50009191919191999ab9a3370e6aae75401120002333322221233330010050040030023232323333573466e1cd55cea80124000466442466002006004602a6ae854008cd403c050d5d09aba2500223263201b33573803803603226aae7940044dd50009aba150043335500875ca00e6ae85400cc8c8c8cccd5cd19b875001480108c84888c008010d5d09aab9e500323333573466e1d4009200223212223001004375c6ae84d55cf280211999ab9a3370ea00690001091100191931900e99ab9c01e01d01b01a019135573aa00226ea8004d5d0a80119a805bae357426ae8940088c98c805ccd5ce00c00b80a89aba25001135744a00226aae7940044dd5000899aa800bae75a224464460046eac004c8004d5404c88c8cccd55cf80112804119a8039991091980080180118031aab9d5002300535573ca00460086ae8800c0504d5d080088910010910911980080200189119191999ab9a3370ea0029000119091180100198029aba135573ca00646666ae68cdc3a801240044244002464c6402466ae7004c04804003c4d55cea80089baa001232323333573466e1d400520062321222230040053007357426aae79400c8cccd5cd19b875002480108c848888c008014c024d5d09aab9e500423333573466e1d400d20022321222230010053007357426aae7940148cccd5cd19b875004480008c848888c00c014dd71aba135573ca00c464c6402466ae7004c04804003c0380344d55cea80089baa001232323333573466e1cd55cea80124000466442466002006004600a6ae854008dd69aba135744a004464c6401c66ae7003c0380304d55cf280089baa0012323333573466e1cd55cea800a400046eb8d5d09aab9e500223263200c33573801a01801426ea80048c8c8c8c8c8cccd5cd19b8750014803084888888800c8cccd5cd19b875002480288488888880108cccd5cd19b875003480208cc8848888888cc004024020dd71aba15005375a6ae84d5d1280291999ab9a3370ea00890031199109111111198010048041bae35742a00e6eb8d5d09aba2500723333573466e1d40152004233221222222233006009008300c35742a0126eb8d5d09aba2500923333573466e1d40192002232122222223007008300d357426aae79402c8cccd5cd19b875007480008c848888888c014020c038d5d09aab9e500c23263201533573802c02a02602402202001e01c01a26aae7540104d55cf280189aab9e5002135573ca00226ea80048c8c8c8c8cccd5cd19b875001480088ccc888488ccc00401401000cdd69aba15004375a6ae85400cdd69aba135744a00646666ae68cdc3a80124000464244600400660106ae84d55cf280311931900719ab9c00f00e00c00b135573aa00626ae8940044d55cf280089baa001232323333573466e1d400520022321223001003375c6ae84d55cf280191999ab9a3370ea004900011909118010019bae357426aae7940108c98c802ccd5ce00600580480409aab9d50011375400224464646666ae68cdc3a800a40084244400246666ae68cdc3a8012400446424446006008600c6ae84d55cf280211999ab9a3370ea00690001091100111931900619ab9c00d00c00a009008135573aa00226ea80048c8cccd5cd19b8750014800880148cccd5cd19b8750024800080148c98c8020cd5ce00480400300289aab9d37540022440042440029309000a48103505431001123230010012233003300200200133351222333512223335122233512233002300848811cdf6a73027304d5e91ac2b25f95435553451da99ef850035f8407888a003500b300530084891c9afc7f814e2fe5356ab3e92d4f95e7f46ea22929e4469c4df1480d51002212330010030022001212230020032221223330010050040032001212230020032122300100320011212230020031122001120011"
    }
    // The contract checkes for the existence of outputAddr in Transaction output
    const simpleScript: PlutusScript = {
        code: simpleContractScript.cborHex,
        version: "V2"
    }
    try {
        const tx = new Transaction({ initiator: walletData })
        tx.sendLovelace({ address: outputAddr }, "3000000")
        tx.redeemValue({
            value: depositUtxo,
            script: simpleScript,
            datum: depositUtxo,
            redeemer: simpleRedeemer
        })
        tx.setCollateral(collateral)
        const unsignedMeshTx = await tx.build();
        console.log("unsignedMeshTx", unsignedMeshTx);

        const signedTx = await walletData.signTx(unsignedMeshTx, true)
        const txHash = await walletData.submitTx(signedTx);
        console.log("Submitetd txHash", txHash);

        return txHash;
    }
    catch (error) {
        console.log(error, 'error')
    }
}